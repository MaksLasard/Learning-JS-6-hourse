//Приложение 1: Пробный запуск кода и первого приложения

// fs = require('fs'); // Мы загружаем модуль который будет доступенн в переменной fs

// const data = fs.readFileSync('./data.txt'); // Это специальная команда для чтения файлов синхронное. Блокирует поток
// console.log(data.toString());

//Приложение 2: CommonJS Modules
// В реальном проекте всегда возвращай результат , а не меняй внутри функции

// const { characters, stealRing } = require('./characters.js');

/*const a = 1;
if(a > 0) {
    const log = require('./characters.js');
    log();
} else {
    console.log('Меньше на 0');
}*/

// Если мы require получаем какую-то переменную она в этом scoup ведет себя как константа. Мы не можем модифицировать саму переменную
// let myChars = characters;
// myChars = stealRing(myChars, 'Фродо');

// for (const c of characters) {
//  console.log(c)
//}

// module.exports = { a }

//Приложение 3: ES Modules

// import { characters, greet} from './characters.mjs';

/* for(const c of characters) {
    greet(c)
}; 
*/

/*import * as char from './characters.mjs';

for(const c of char.characters) {
    char.greet(c)
};
*/

/*async function main() {
    const { characters, greet } = await import('./characters.mjs')
    for ( const c of characters) {
        greet(c)
    }
}
main(); - ассинхронный импорт модуль
*/

// Events

// Event Emitter - нужен для того чтобы обмениваться событиями между частями нашей системы
// С одной стороны мы можем подписаться на какое-то событие. С другой стороны его генерировать
// В случае генерации - передавать какие-то данные которые мы можем обрабатывать в нашем обработчике этого события 

// Чем Event Emitter - отличается от Event Target?

/*
Event Emitter:
- Берется из модуля Events - Берется из стандартной библиотеки Events которая у нас есть в Node.js
- Несколько listener на 1 событие 
- Эмулирует почти всю EE API
- Обработка ошибок через error - позволяет обрабатывать ошибки через специальное событие error
- Встроенные события add/ remove listeners
*/

/*
Event Target:
- Глобальная переменная
- Только 1 listener для события - если мы добавим 2 он его проигнорирует , но ошибки не будет
- Частичная эмуляция
- Нет обработки через error
- Нет событий добавления и удаления обработчиков
*/

// Если вы захотите работать с Event Emitter в Node.js, то в данном случае нужно использовать только Event Emitter и не использовать Event Target

// Как нам получить EventEmmiter? Мы получаем его из стандартной библиотеки Events

/*
const EventEmmiter = require('events');

Теперь мы можем создать свой EventEmmiter, с помощью конструктора куда мы будем отправлять и подписываться на событие 

const myEventEmmiter = new EventEmmiter();

Теперь мы сделаем простую функцию которая будет выводить ну скажем мы будем кидать событие connecting. Будем имулировать что это база данных
У нас есть eventListener который слушает событие connected и в результате нам выводить dataBase connected

const logDbConnection = () => {
    console.log('DB connected')
};

myEventEmmiter.addListener('connected')
Может иметь следующие слойства. 
Внутрь мы передаем информацию на какое событие мы подписываемся и что мы должны делать в результате этого выполнения
1. Событие будет connected
2. В результате мы выполним функцию logDbConnection
Тем самым мы подписались на это событие. У нас будет подписка которая будет каждый раз тригеррится 

Где находятся подписки мы будем смотреть когда будем изучать архитектуру Node.js

Теперь мы сгенерим событие и посмотрим что у нас в результате произошел console.log(). Фактически наша база подключилась
Мы должны эммитеть в тотже Emmiter на которы мы подписались

myEventEmmiter.emit
- Используем функцию emit('connected') - которая говорит что мы можем передать событие, а дальше неограниченное число аргументов. Это дополнительные аргументы в функцию
- Событие называется connected - и в результате ожидаем что когда мы запустим наш скрипт у нас выведется console.log('DB connected')
- Потому что сгенерится событие, подписчик logDbConnection его получит

Иногда у нас возникает необходимость удалить connection. 
- К примеру: Мы перезапустили какую-то часть нашего приложения
- Утечка eventListener - одна из частых проблем которую можно встретить в приложении

// WayUp обучение Node.js

// Все начинаеться с npm init - первое действие. И написать название. 
// Далее ввод информации для проекта

// Лайфхак. Копируешь файл package.json в новый пустой проект. Нажимаешь npm i и устанавливаются все зависимости с предыдущего проекта

Помимо addListener у нас есть removeListener

*/
// Сокращенный синтаксис

// Оператор объединения с null

// const name = ''
// const nameOutput = name
// const output = `Привет ${nameOutput}`
// console.log(output)

// const nameOutput = name || 'Анноним!'
// Костыльное решение когда пользователь вводит все кроме name. Выведет то, что будет true 
// Приравнивает к неопределенности: null, undefined, false, 0, ''
// У нас есть 2 знака вопроса ?? - чтобы неопределенностью было только null, undefined

// const nameOutput = name ?? 'Анноним!'

// В таком случае все будет валидным значением кроме null, undefined
// undefined - значение по дефолту
// null - что значения нет

// if (name !== null && name !== undefined)


// ?. - опциональная ципочка

// const obj = {
//     count: 7,
//     dog: {
//         name: 'Bobik',
//         say: () => {console.log('gav')}
//     },
//     cat: {
//         name: 'Myrzik',
//         say: () => {console.log('may')}
//     }

// }
// console.log(obj.dog.name)

// Если мы в объекте обратимся к нескольким свойствам подряд которых нет. Программа сломается
// obj.shake.name.age - программа сломается и будет выдавать ошибку
// В таких случаях чтобы программа не ломалась можно использовать if чтобы программа не ломалась

// if (obj && obj.cat && obj.cat.name) {
//     console.log(obj.cat.name)
// }
// Проверяет есть ли объект, проверяет есть ли у объекта поле cat, а у cat name

// Самый простой вариат прставить знак вопроса
// console.log(obj?.cat.name)
// Есть ли obj?. Есть ли cat?. - то взять у него name

// Знак вопроса ставим только там где мы точно знаем что есть свойство которое может быть, а может не быть. Это абсолютно нормальное поведение
// Не нужно использовать на всякий случай

// obj.dog.say?.()

// Диструктурирующее присваивание

// const arr = ['John', 'Sam', 'Bob'];
// const [one, two, three, four = 'Pavel'] = arr - Такой синтаксис означает распарсить массив
// const [one, ...restPeople] = arr - Один элемент в одну переменную, все остальные в другую в формате массива

// Мы создаем переменные one, two, three. 

const obj = {
    name: 'John',
    age: 25
}
// const {name: peopleName, age: score} = obj // Какое свойство берем: в какую переменную кладем
// const peopleName = obj.name // Сокращенная запись
// Также работает с значением по умолчанию и rest параметроом(будут в формате объекта)

// Деструктуризация может быть вложенной, и у нее такой же синтаксис только внутри
/*
Node.js хорош тем что в нем по умолчанию поддерживается модульная система. Мы можем import и exports различные модули
Например мы можем работать с уже скачанными модулями

cosnt chalk = require('chalk') - подключение модуля chalk который был ранее установлен через npm

Функцция require() - встроена в Node.js с помощью нее мы подключаем пакеты
В скобках мы пишем абсолютный путь, Node.js поймет что мы обращаемся к папке node_modules

Как использовать данный пакет?
1. Допустим в console.log(chalk.blue('Hello Node.js')) мы можем передавать значение chalk и указывать какой нибудь цвет. И передать строку которую мы хотим вывести
Результат после запуска приложения: node V_Minin.js  - Hello Node.js синего цвета. Это говорит о том что все подключено правильно

Мы можем создавать свои собственные модули

const text = require('./data') 
console.log(chalk.blue(text)) - 'Hello NodeJS from data.js' синего цвета

По умолчанию в JS нет таких функций как require, module exports и тд. Но при этом они нам доступны
Как это работает?

На самом деле по умолчанию Node.js берет и каждый модуль (который представлен в виде отдльного файла) оборачивают в функцю

(function (exports, require, module, __dirname, __filename) {
    cosnt chalk = require('chalk')
    const text = require('./data') 

    console.log(chalk.blue(text))
})
Данная функция которая вызывается, представляет из себя модуль принимает в себя некоторые параметры
Параметр require - является функцией
Системные переменные - __dirname, __filename - константы

Каждый модуль оборачивается в такую функцию и в модуле доступны все переменные. Работает и без таких функций
__dirname - это системная переменная которая показвыет папку в которой мы ведём работу
__filename - также есть абсолютный путь до папки в которой мы ведем работу, но также и присутствует название файла (index.js)

Помимо того что мы можем работать с своими модулями или подключать дополнительные модули к проекту
В NodeJS присутствуют также дополнительные встроенные модули которые мы можем использовать

const path = require('path') - подключаем соответсвующую библиотеку path
Это встроенный модуль в NodeJS и он доступен всегда его не обязательно подключать
Методы path:
1. Метод возвращает название файла: path.basename(__filename) в который мы передаем строку. Мы можем использовать переменную __filename
Если файл вложенный его можно запустить node Moduls_VM / path

2. Метод позволяет получить имя директории: path.dirname(__filename) - укащывается в абсолютном пути

3. Метод позволяет узнать расширение файла: path.extname(__filename) - .js

4. Выдает объект у которого есть ключи с параметром данного файла: console.log(path.parse(__filename).name)

Далее в библиотеке path присутствуют методы которые позволяют удобно работать с путями 
Если нам в Node.js необходимо сформировать какой-то путь мы можем:
console.log(path.join(__dirname, 'server', 'index.html'))

.join() - возвращает нам строку

Обратится к модулю path вызвать метод join, далее указываем название директории в которой работаем
Это просто строка поэтому указвыем строку, допустим мы хотим перейти в папку 'server' и получить достпуп до файла 'index.html'

Пока у нас нет такой папки, такого файла, но идея в том что мы получили здесь строку содержащий корректный путь
Как результат мы получаем абсолютный путь до папки demo/server/index.html

В дальнейшем мы будем пользоваться данной библиотекой для комфортной работы с путями 

Модуль FS:
- Здесь мы подключаем константу FS из модуля fs

const fs = require('fs')
const path = require('path')

Данная абровиатура переводится как file system
Данный модуль позволяет нам работать с различными файлами 

Что мы можем делать с File System?
1. Мы можем создавать различные папки
fs.mkdir
Мы можем обратится к fs и вызвать метод mkdir 

Если мы посмотрим на mkdir, что таких методов присутствуют 2: mkdir и mkdirSync
И дейтвительно по умолчанию нам доступны либо асинхронные методы либо синхронные методы
Лучшее использовать ассинхронные методы, т.к они не блокируют поток который в Node.js всего лишь один

Если мы используем какие-то ассинхронные методы, то это значит что мы полной мере используем концепт Event Loop в Node.js 
И поэтому мы будем более эффективно писать наш код. Ассинхронные методы пишутся без Sync

Для того чтобы создать папку мы должны указать ее путь, и чтобы работать с путями я подключу модуль path
fs.mkdir(path.join(__dirname, 'test'), (err) => {
    if (err) {
        throw err
    }
})
- Первым параметром мы передаем путо до новой папки обращаясь к path и вызвать метод join
- Дальше мы скажем что мы хотим сделать новую папку относительно текущей директории

- Вторым параметром передаем callback мы запишем его как стрелочную функцию
- ВАЖНО!!! Есть одно правило в Node.js: Когда мы работаем с какими-то ассинхронными операциями, то всегда первый параметр в callback функции является некоторая ошибка err
- И дальше обычно мы должны проверять если данная ошибка есть, то тогда нам как-то ее нужно обработать

- Например с помощью оператора throw можем ее выкинуть

- Если же ошибки никакой нет, то вместо данного объекта придет null и данный if не сработает







*/

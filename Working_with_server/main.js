/*
Зачем работать с сервером с стороны Frontend

Представте, у вас есть сайт или приложение. Нам например нужно получать список пользователей и как-то с этим взаимодействовать
Допустим чтобы открывать или закрывать доступ к определенным частям нашего приложения
И как раз с помощью информации о пользователях мы сможем это сделать

Как обычно получают данные от сервера?

В работе с сервером в Frontend используются API, которые вместе с документацией к нам попадает от Backend разработчика
В реальных примерах это могут быть разные данные все зависит от проекта

В каком формате проходит передача данных?

Основным форматом для представления данных/значений служит формат JSON
Как раз мы его получаем когда стучимся на определенную API


- Сейчас мы попробуем сделать запрос на определенную API
Будем использовать бесплатный сайт {JSON} Placeholder

Переходим на сайт где мы можем с разных API получать данные 

Процесс работы с JSON:

- Копируем ссылку, и переходим в код

- Заведем переменную в которой будет хранится ссылка на эту API
Чтобы мы потом подставляли эту переменную в те запросы которые нам необходимо совершить
Главное читать документацию потому что у каждой API свое описание запросов. Где-то нужно передать объект настроек , где-то нет

- Чтобы сделать запрос на сервер т.к у нас все запросы они ассинхронные
Это означает что мы не знаем сколько будет длится этот запрос и нам нужно удостоверится что этот запрос ушел
Благо у нас есть такие констукции в JS ка promise которые позволяют нам руководить процессом ассинхронного кода
Поэтому мы воспользуемся методом fetch внутри которого как раз таки встроен promise
И он возвращает promise. С помощь этого промиса мы дальше можем воспользоваться методом then либо catch
И сможем далее как-то общатся уже с теми данными которые нам пришли с сервера

- Мы воспользуемся методом fetch()
Метод принимает 2 параметра. 1 это адрес запроса (Наш url|api который мы записали в переменную)
В качестве 2 параметра принимает объект настройки

- Мы передаем requestUrl. 
B теперь мы будем понимать что методод fetch нам возвращает промис 
И как раз этот промис имеет метод then который выполнится в случае удачного запроса на сервер

- Далее с помощью цепной записи мы будем запускать метод then
Тут он принимает функцию. В этой функции у нас будет аргумент response
И далее нам должен прийти какой-то ответ. Посмотрим какой придет ответ. Мы выведем его в консол

- Мы сделали запрос на адрес requestUrl. И ждем ответа
В консоле мы видим что нам пришел некий ответ response
Это некий объект. Это именно объект с свойствами который хранит ответ который нам пришел на запрос на API requestUrl
На этом этапе мы получили просто объект с теми данными которые нам отдал сервер
Но чтобы получить те данные которые мы хотели изначально нам необходимо еще воспользоваться таким методом JSON
Если вы ожидаете от сервера JSON, то нужно на этом этапе воспользоваться этим методом
Поэтому к response применяем метод JSON

- Далее мы продолжаем с помощью цепной записи продалжаем писть
Предыдущий метод then вернул нам промес. Теперь мы здесь можем воспользоваться методом then
И вот теперь посмотреть на новый ответ data(даннй). И посмотрим какие данные на втором then вернул нам сервер
Сервер вернул нам JSON в кол-во строк которые мы хотели получить

- Перейдем во вкладку network и посмотрим как там выглядят наши запросы 
Переходим на вкладку и нужно включить режим XHR и можно будет посмотреть на запрос
Так как наш запрос уходит сразу же после обновления нашей страницы. Мы обнавляем страницу и видим что ушел какой-то запрос
Мы переходим в вкладку headers и увидим что метод запроса у нас GET. 

Существуют 4 осовных: 
    GET - чтобы мы получили данные 
    POST - чтобы мы отправили данные 
    PUT - может обновить данные
    DELETE - удаляет данные

В втором параметре (объекте с настройками) в котором мы можем:
- Изменить метод 
- Дабавить содержимое которое мы будем отправлять на сервер
- Передача каких-то мета данных

Это все служит для того чтобы передать какие-то дополнительные настройки

Кроме метода GET у нас есть Status Code который как раз и говорит нам удачный ли нам пришел ответ от сервера или нет
Бывает что может упасть ответ 400, 500 и тд Это уже не хорошие ответы
Потому что они говорят о том что у вас есть какие-то проблемы. Либо вы не правильно стучитесь на сервер, либо сервер не отвечает

Также показывается адрес запроса 

- Перейдем в вкладку Prewiev
Это уже модифицированный формат JSON наш ответ

*/

// Раздел практики

// Выполнение первого запроса на сервер

const requestUrl = 'https://jsonplaceholder.typicode.com/posts'
// Это API может быть другим которое ты нашел в интернете. Чтобы найти нужно загуглить Free REST API

fetch(requestUrl)
    .then(response => response.json()) //методы как респонс могут называться как угодно, но есть принятый формат
    .then(data => console.log(data))
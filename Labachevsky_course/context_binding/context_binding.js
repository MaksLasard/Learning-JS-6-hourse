/*
auto.brand - слева от точки находится объект к которому привязан контекст метода drive()
Также это относится и к классам и прототипам

Если мы не вызываем функцию drive мы какбы вызываем определение
Т.е мы можем использовать нашу функцию позже за пределами нашего объекта auto

Наш новый метод autoDrive небыл ни к чему привязан

Наша фугкция drive() была изначально создана внутри объекта auto
Но эта функция будет привязана к объекту auto только в том случае если мы будем вызывать ее через этот объект auto
Т.е мы будем говрить auto.drive()

Метод bind - мы можем использовать этот метод чтобы принудительно привязать контекст нашей функции к нужному объекту
Т.е мы можем менять значение this внутри нашей функции

Мы как бы говрим JS что создай новую функцию autoDrive и когда она будет вызываться значение this внутри этой фунцкии,
будет равнятся тому что мы передаем внутрь метода bind. В нашем случае объекта auto

Метод bind нужен чтобы использовать метод вне контекста объекта
Т.к если вызывать метод вне контекста объекта, this будет ссылаться на глобальный объект window

Контекст привязывается один раз, мы не можем его перепривязывать

*/

const auto = {
    brand: 'Tesla',
    drive() {
        return `Заведем нашу ${this.brand}`
    }
}
const motorBike = {
    brand: 'Suzuki'
}

// const autoDrive = auto.drive.bind(auto) 
// const autoBike = auto.drive.bind(motorBike)
// const autoBike = auto.drive.bind( { brand: 'Корабль'} )

const $ = document.querySelector.bind(document)
/*Строчные элементы*/
/*Блочные элементы*/
/*Строчно - блочные элементы*/
/*https://htmlreference.io/ справочник чтобы узнать какой элемент строчный, блочный, строчно-блочный, является ли мета-тегов, требуется ли закрывающийся тег,*/ 

/*
Блочные элементы: 
- Сайт состоит из различны блоков в которых находятся элементы, header, footer, промежуточные блоки
- Классический блочный элемент div. Занимает всю область сайта по ширине
- Блочные элементы очень жадные 
- Если не указывать блочным элементам ширину, элемент займет все доступное пространство по ширине 
- Если не указывать блочным элементам высоту, элемент сожмется на ширину контента и установленные padding
- У каждого элемента есть свои стили по умолчанию: user agent stylesheet - параметры по умолчанию
- Свойство box-sizing: border-box; - изменяет поведение блока. Уменьшает все внутренние элементы чтобы следовать задажным высоте и ширине контента.
- При установлении фиксированных значений блоку свойства принимает лишь контент, а остальные padding, margin, border суммируются
- * звездочка, это селектор всего. Мы применяем правила ко всему что будет на странице 

Строчные элементы: 
- Строчные элементы нужны для наполнения сайта 
- Строчные элементы занимают в блоке столько места сколько в них контента
- Если ты не можешь отодвинуть элемент сверху или снизу, нужно проверить не является ли он строчным
- Строчные элементы не реагируют на свойства ширины, они занимают ровно столько места сколько в них есть контента 
- Картинки в HTML это тоже строчные элементы. Они не будут являтся блоками 
- Тег P является блочным элементом 

Строчно-блочные элементы: 
- Взяли все самое лучшее из строчных и самое лучшее из блочных и объеденили их в себе 
- От блочных они взяли все параметры которые есть в блочной модели CSS, от строчных они взяли расположение в одной строке. Они уже не настолько жадные, не захватывают всё пространство
- Чтобы поставить картинку по центру, нужно изменить его на блочный элемент
- Свойство margin: 0, все внешние отступы ставятся в 0
- Свойство margin: 0 auto мы расположим картинку по центру только по горизонтали 
- Если мы используем в margin 2 значения, то первое отвечает за вертикальное выравнивание и отступы, 2 за горизонтальное
*/

/*
Позиционирование элементов в CSS. Принцип карточной колоды:
- position: static - Статическое позиционирование производится по умолчанию, в том случае, если свойство position не указано
- position: relative - Относительное позиционирование сдвигает элемент относительно его обычного положения
- position: absolute: 
  Элемент исчезает с того места, где он должен быть и позиционируется заново. Остальные элементы, располагаются так, как будто этого элемента никогда не было
  Координаты top/bottom/left/right для нового местоположения отсчитываются от ближайшего позиционированного родителя, т.е. родителя с позиционированием, отличным от static. Если такого родителя нет – то относительно документа.
  При установке элемент как бы выподает из списка HTML, становится не попорядку, а там где мы укажем

- position: absolut работает только внутри блока у которого стоит position: relative . Т.е у родительского 
- Если мы хочешь абсолютно спозиционировать какой-то элемент, внутри другого элемента, то обязательно установите позитион абсолют у родительского элемента
- Если ты так сделаешь элемент будет внутри блока
- position: fixed - приклеивается к позиции на экране, и остается даже при скроле
- position: inherit - означает что мы берем свойство и наследуем его от его родителя. Наследуем позиционирование родителя
- Если класс стоит последним он будет перебивать ранее добавленный цвет

Принцип карточной колоды: 
- Свойство z-index: 5; - отвечает за позиционирование элементов по оси Z. Может принимать числовые значения, в том числе и отрицательные 
- Тот элемент который больший index, большее число тот и выходит на первый план
- Если нужно убрать на задний план элемент с абсолютным позиционированием нужно поставить отрицательный z-index: -1;
*/


/*
Выравнивание элементов по вертикали. Верстка таблицами и float'ами:
- Cвойство float - отвечает за обтегание текстом какого-то элемента 
- Чтобы картинку обтекали элементы справа нужно поставить float: left, и наоборот

- Проблема выравнивания блоком когда мы используем display: inline-block
- Чтобы нам выравнивать элементы по вертикали нам понадобится такое свойство как: vertical-align: top; middle, и т.д
- Это свойство работает только тогда когда у нас у элементов стоит display: inline-block

- Таблицами сайты мы уже не создаем - это прошлый век
*/

/*
Еденици измерения в CSS
- Изначально все величины можно разделить на 2 группы: Относительные единицы и Абсолютные единицы

- Процент %: - эта величина относительная. Она зависит от того какая ширина и высота у родителя этого элемента, она должна быть фиксированной. width: 50%; - установил ширину элемента относительно его родителя
- У некоторых элементов родительских элементов не существует
- em и ex: - величины которые зависять от высоты шрифта
- em - от высоты шрифта текущего элемента. Какой font-size там установлен
- ex - от высоты символа x. От размера быквы x на странице

- em: Мы берем размер шрифта в px и умножаем на em. 30px * 50em = 1500px
- На практике это не используется т.к это не удобно

- Новые единицы называются: rem, vh, vw
- Это относительные величины которые зависят от какого-то другого параметра
- rem: - величина зависит от размера шрифта, только уже корневого элемента. А не самого элемента в котором применяется данная величина. Тег html 
- vw - 1|100 ширины нашего окна
- vh - 1|100 высоты нашего окна

Специфичность CSS селекторов: 
- Различные способы стилизации различных элементов они имеют разный приоритет в понятии стилей это называется специфичность
- Какой-то селектор будет более специфичен чем другой (каскадность)
- Когда мы что-то стелизуем с помощью тегов, то такие стили являются менее специфичными
- Классы являются более специфичными т.к класы определяются на определенные элементы
- Если у нас есть несколько классов у одного элемента, то применяются стили если они конфиктуют у последнего класса. Второй стиль является как бы более важным более специфичным
- Когда мы задаем id в CSS - он будет очень специфичным. Т.к это правило может повторятся только для одного элемента. Оно будет перебивать все остальные
- Самые специфичные это inline стили которые пишутся в HTML в теге style. Их никогда не используют
.wrapper .element {} - вложенные классы перебивают все. С пробелом
- Если мы используем вложенность классов, то она будет специфичней чем какой-то отдельный класс
- Когда мы используем комбинацию селекторов она становится намного специфичней
.wrapper.element {} - без пробела.

Градация специфичности селекторов:
1. element.style{}
2. #second.element{}
3. #second{}
4. .wrapper .element{}
5. .element{}

Flexbox и применение её на макете: 
- Служит для выравнивания любых элементов на сайте

Чтобы flexbox включить нужно display: flex;
Когда мы ставив display: flex; у родителя.
Flexbox построен на принципе осей: 1 вариант Есть главная (горизонтаьлная) ось и поперечная (вертикальная) ось
Также 2 вариант мы можем поменять направление осей, сделав поперечную ось главной, а главную поперечной

Когда мы ставим display: flex; по умолчанию стоит именно 1 вариант

1. Если нужно выронить элементы по главной (горизонтальной) оси
!!! ВАЖНО. Все свойства display: flex; и последующие мы применяем именно для контейнера (родителя)

.my-flex-container { - родительский контейнер
  display: flex;
  justify-content: center; - мы хотим сказать что нужно выровнять все элементы по центру
  justify-content: space-between; - элементы красиво распределятся по всей ширине родительского блока
  justify-content: space-around; - элемены равномерно распределены по всей ширине блока

  align-items: center; - все элементы выровнялись по горизонтали по центру внутри родителя
}
1. Все элементы встали по центру экрана
2. justify-content: - отвечает за выравнивание элементов по главной оси
3. align-items: - щтвечает за выравнивание элементов по поперечной оси

Особенности flexbox: 
1. Переполнение контейнера
Если вдруг не хватает места в строке, часть элементов спустилась бы ниже 
flex-wrap: wrap; - задаёт правила вывода flex-элементов —  в одну строку или в несколько, с переносом блоков.
wrap - Расположение в несколько линий

2. Мы можем устанавливать порядок изменения блоков задав всем элементам позицию на которой они должны быть

3. Изменение осей
flex-direction: column; - поперечная становится главной (вертикальная), поперечная главной (горизонтальная)
flex-directinon: row; - по умолчанию. Главная горизонтальня, поперечная вертикальная

При изменении направления осей все методы работают подругому. Отталкиваются от главной оси

!!! ВАЖНО. Чтобы начать использовать в проекте flex-box нужно у всех элементов внутри блока убрать свойство display: inline, inline-block, block
Также убрать отступы и выравнивание margin и vertical-align
Убрать нужно все что конфликтует с flex-box

Сброс стилей reset.css/normalize.css:
- Используется для сброса стандартных стилей браузера для приведение страницы к одному формату во всех браузерах
CSS Reset - это небольшой css файл который сбрасывает все настройки стилей для всех элементов чтобы они везде выглядели одинаково

На смену CSS Reset пришел normolize.css - который не только сбрасывал все стили в 0. Он делал это более по умному
Он оптимизировал только те стили которые необходимо. 
Чтобы те элементы у которых была разница в разных браузерах выглядели теперь одинаково
Это более продвинутая версия

Когда normolize.css не нужно подключать?
- Дела в том что normolize.css уже включен в некоторые библиотеки. Когда мы подключаете бибилиотеку то normolize.css уже встроен

Подключить normolize.css можно локально или удаленно: 
- Локально через css подключение файла
Сам файл нужно подключить перед гланым файлом css. Все сторонние библиотеки

- Удаленное подключение при помощи cdn серверов
Для использования в проектах нужно использовать толькои минифицированную версию т.к это ускоряет загрузку сайта
normolize.min.css


Подключение шрифтов на сайт:

Свойство font-family: определяет приоритетный список из одного или нескольких названий семейства шрифтов и/или общее имя шрифта для выбранного элемента.

1. Подключение стандартных шрифтов которые есть на ПК

font-family: Gill Sans Extrabold, sans-serif
Состоит из двух частей: 
- Мы прописываем свойсво font-family:
- Указываем название семейства шрифта который мы хотим использовать 
- Через запятую мы указываем общий тип

В шрифтах есть несколько общих типов названий: 
- Самые популярные это serif и sans-serif
serif - это шрифт с засечками
sans-serif - это шрифт без засечек

Пример записи шрифтов 
font-family: Verdana, Arial, Helvetica, sans-serif - устанавливаем приоритет шрифтов которые мы хотели бы подключить 

В примере несколько шрифтов которые написаны через запятые, а дальше что общий шрифт будет без засечек
Свойство font-family - поддерживает сразу несколько шрифтов 

Прежде чем подключить шрифт на сайте браузер ищет на компьютере пользователя шрифт который был прописан в font-family
Поэтому шрифтов несколько вариантов т.к если какого-то шрифта не будет подключится похожий следующий
И так пока не закончатся шрифты, если все равно шрифты не найдены выбрать любой который соответсвует шрифту sans-serif

Удаленное подключение шрифтов: 
- Есть такой сервис который называется Google Fonts он помогает настроить шрифт который нам нужен и подключить себя на проект

Настройка шрифтов осуществляется на сервере Google Fonts и все настройки помещаются в ссылку которую ты подключаешь на сайт через тек head
От количества подключаемых шрифтов и начертаний на странице зависит скорость загрузки нашей страницы

Как лучше подключать? Через link или import?
- Правельней и проше подключать через тег link

Чтобы начать использовать начертания и шрифт, мы применяем правило к всему документу к html или к body

html {
  font-family: Gill Sans Extrabold, sans-serif
}

После использования этого правила можно даже не использоывать font-family
А работать чисто с начетаниями
Если CSS не может найти шрифт, или в шрифте ошибка, или на ПК его нет, то будет использоваться шрифт по умолчанию

Для локального подключения шрифта нужно скачать шрифт и подключить в CSS
!!! ВАЖНО. Обязательно проверяй пути откуда будут братся шрифты, т.к если пути неправельные, то ничего работать не будет\
Все шрифты которые подключаются локально должны быть в отдельном файле

Если нужно подготовиться шрифты для корректной работы в разных браузерах, но в наличии они только в разных форматах
Нужно их конвертировать в другой формат через онлайн конвертер


Библиотека Boostrap 4: 
- Это набор готовых решений которые можно сразу использовать

Начнем использовать Bootstrap с переноса страртового шаблона в файл с проектом
В проектах используется минифицированные файлы чтобы сайт загружался быстрей

Также в Boostrap уже добавленны определенные опции

- У всех элементов уже строит box-sizing: border-box
- Сброшены все margin и padding
- Уже включена мини библиотека как rebot.css (Тоже самое что и normolize)
Если мы используем Boostrap, то нам не нужно отдельно подключать normolize и не нужно сбрасывать css правила

Вкладка components: 
- Показывает большое кол-во компонентов которые уже красиво созданны которые можно использовать

Создание пробного проекта: 
- Navbar - навигационное меню
Boostrap через классы мы можем использовать определенные уже стилизованные элементы

Основное преимущество Bootstrap это система сеток.
- Bootstap поддерживает колоночную верстку. Зачастую используеся 12 колоночная система
Каждый элемент занимает определенное количество колонок. Благодаря этим колонкам мы можем быстро адаптировать сайт под все устройства

Несколько главных правил для пользования сетками: 
- Использование контейнера бутстрап
Есть контейнер растянутый на весь экран container-fluid
Если мы хотим использовать колоночную верстку нужен обязательно просто container

- Строки .row
Для того чтобы колонки сработали нам всегда необходимы строки

- Колонки
Колонки всегда распологаются в строках. И создаются с помощью ключевого класса .col

- 4 правило
Для того чтобы у вас сработала такая колоночная верстка нужно строго следовать этому шаблону

.container {
  .row {
    .col {
    }
  }
}
Сначало контейнер, только внутри row как строка, только внутри колонка
Если вдруг вы где-то обернете колонку в какой-то отдельный блок, то ничего работать не будет 
Только таким образом можно использовать строки. Потому что все построено на flex-box

- 5 правило
Колонки можно модифицировать с помощью цифр в классах col-3 блок элемент займет 3 колонки. Всего 12 колонок
Если не указывать количество колонок для элемента, то Бутстрап разделить поровну между всеми элементами

Некоторые css классы используются в сокращенной форме в классах Бутстрап. Например mt-5 (margin-top: 50px)
Цифра 5 означает 50
В бутстрапе в Notation есть обозначение css классов и размеры

Еще приимущество колонок - это адаптивность

Зачастую в реальных проектах бутстрап используют только ради сеток
Остальные элементы используют редко. Зачастую библиотека смешивается с вашим css кодом

!!! ВАЖНО. Сетка подключается только в минифицированном формате для более быстрой загрузки файлов

Обновление Bootstrap 5 version: 
- Вместо JQuery использует обычный JS
- Библиотека полностью отказывается от поддержки браузера Internet Explorer
- css переменные. Теперь используются внутри Bootstrap 
- Сетка Bootstrap - поддержка экрана больше чем 1400px
- Bootstrap Icon
- Обновление некоторых css классов 

Практика: Создание сайта с использованием Bootstrap 5
- Подготовка структуры файлов и папок
- Export все картинок из Figma
- Подключение необъодимых css файлов 
- Подключение шрифтов

Тег conteiner мы можем использовать отдельно чтобы ограничить пространство
- Мы создаем меню с помощью семантического тега nav
Внутри мы должны создать список. Т.к меню подразумевает что у нас есть какой-то список ссылок по которым можем перейти пользователь
Ссылки мы можем пока забить заглушками. Если мы пока не знаем куда она будет вести или не хотим куда-то ставить

ВАЖНО!!! Чтобы управлять точками нужно делать на уровне ul. Свойство list-style: none;
justify-content: space-between; Распределяет равномерно элементы по контейнеру 1 и последний к границам родительского элемента

Свойство line-height: 15px; - нужен в основном для работы с многострочным текстом

Если мы используем свойство opacity: он будет устанавливать прозрачность всему элементу тем самым весь контент будет полу прозрачным
Чтобы использовать прозрачность только на background нужно использовать альфа-канал и свойство rgba(0,0,0 .6)
Где первые 3 нуля это смесь цветов, а .6 это прозрачность в сокращенном варианте 0.6






*/

/*
React - это JavaScript библиотека которая служит для создания пользовательских интерфейсов
Разработан компанией Facebook. Основной подход заключается в компонентном подходе
Мы создаем определенное приложение состовляя его из различных компонентов. 

Чтобы начать разработку нужно:
1. Перейти в папку с проектом и открыть терминал 
2. Ввести компанду npx create-react-app и название проекта (папки) и подождать когда загрузится проект
3. После создания проекта переходим в папку созданную react: в данном случае это react_v.minin

Рассмотрим что мы получаем в качестве проекта:
1. Базовую структуру для любого frontend приложения 
- node-module: хранятся различные библиотеки которые служат для работы react и сборщиков 
- gitignore: служит для того чтобы не нужные файлы не попадали в систему контроля версий Git (node-modules)
- package-json: является инструкцией для всего нашего проекта 
- public: в папке присутствуют различные файлы главный файл index.html который и запускает наше приложение 
  - index.html: из важного div с id="root" куда мы будем складывать все наше приложение 
- scr: все наше приложение запускается из файла index.js
    - в начале мы импортируем react, react-dom, подключаем стили, импортируем компонент App


Например мы зададим корневой класс который будет добавлять стилистики
- Это будет <div></div>
- Чтобы задать элементу какой-то класс нужно написать className
- Теперь в файле index.css (это некоторые глобальные стиля для нашего проекта)
- В реакте основным принципом является компонентный подход. Каждый файл js в проекте это новый компонент
- Поэтому мы можем разрабатывать все наше приложение в отдельных компонентах, а потом его комбинировать

- Мы создадим папку Todo где будут хранится все компоненты связанные с Todo
- Первый компонент который мы создадим называется TodoList.js
- Есть старое правило что мы всегда должны импртировать библиотеку react из 'react'

- Второе плавило: Мы что-то должны экспортировать наружу
- Чтобы наш созданный компонент работал нам нужно его добавить в компонент App

Взаимодействие с стилями в react:
- В рамках одного проекта выбирается только один подход к стилизации компонентов и используется на протяжени всего проекта

Способо 1: Задание стилей через объект

const styles = {
    ul: {
        listStyle: 'none'
    }
}
Свойства которые состоят из 2 слов и более пишутся через camelCase
Обязательно указывать что эти стили пренадлежат какому-либо элементу
- для этого в JSX присутсвует атрибут style: style={styles.ul}

<ul className="text__list" style={styles.ul}>
  <li className="text__task">Задача номер 1</li>
  <li className="text__task">Задача номер 2</li>
  <li className="text__task">Задача номер 3</li>
</ul>       

- Называть компонент нужно также как называется файл
- Подключение компонента делается либо просто переменной либо <TodoList|> закрытым тегом

- Добавление динамики:


- Если мы делаем какую либо итерацию в реакт, то для каждого объекта который является итерируемым мы должны добавить специальный атрибут key
- Куда мы должны передать некоторое уникальное значение например key={todo.id}
- Это нужно для того чтобы реакт более эффективно рендерил нам шаблон

JavaScript является не типизированным языком и мы можем добавлять одним и тем же объектам разные типы. 
Поэтому есть потенциальные ошибки при передаче свойств. 
Поэтому в React хорошей практикой считается описание входящих свойств в нужный компонент
И для этого нам нужно установить дополнительную бибилиотеку которая называется propTypes













*/
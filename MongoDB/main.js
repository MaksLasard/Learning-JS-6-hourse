/*
use - 'название БД' - перейти в базу данных
db.createCollection('') - создание коллекции
db.dropDatabase('') - удаление базы данных
db.users.find('') - делаем запрос к БД.  find() - для запроса
db.users.insertMany([]) - добавление нескольких документов (сущностей)

MongoDB - это документрооринтированная система управления базами данных

Для хранения данных используется JSON подобный формат что является удобно для разработчика на JS
Это СУБД отличается высокой доступностью, масштабируемостью, безопасностью

Из главных особенностей можно отметить - это быстрая разворачиваемость в облаке, кросплатформеннойсть, не требует описания схем таблиц
Данные хранятся в виде коллекций и документов 

Пример:
Есть база данных, она состоит из набора коллекций 
Каждая коллекция в свою очередь содержит какие-то документы 
А сами документы хранятся в JSON подобном формате 
У документов в одной коллекции не обязательно должна быть строгая структура 
- Один документ может содержать какие-то поля, а второй может их и не содержать

План работы:
- Для начала нужно установть сервер MongoDB на наш ПК
Сайт -> Products -> Community Server -> Выбираем Window -> Скачиваем -> Установка

- Чтобы посмотреть список имеющихся баз данных вводим в Mongosh команду show database;
Мы получаем базы данных которые были в графическом интерфейсе

- Чтобы использовать какую-то базу данных и как-то изменять коллекци используется ключевое слово 'use'
В случае если базы данных с таким называнием не существует она будет создана
Обращатся к базе данных можно с помощью ключевого слова db (database)

- db.createCollection('users')
Далее функция createCollection в ковычках мы указываем название коллекции

- Чтобы посмотреть коллекции и базы данных show collections / database

- Чтобы удалить базу данных db.dropDatabase()

Чтобы не писать команды каждый раз заново используем стрелки на клавиатуре

- Создание документа
db.users.insert({
    name: "Maxim",
    age: 23
})
Обращаемся к базе данных, через точку пишем название колелекции, вызвыем функцию insert(). И как в JS добавляем объект
В фигурных скобках пишем поля которые будут у данного документа. Документ представляет из себя просто объект

Все сработало. Только мы получили предупреждение что insert - это устаревший способ

- Чтобы сделать запрос на получение пользователей используется фунци find(): db.users.find()
Монго автоматически присвоил пользователю уникальный ID, поскольку любая запись в базе данных далжна быть уникально индифицированна

- Добавление нескольких сущностей. Для этого используется insertMany()
db.users.insertMany([
    {name:"Alex", age: 24},
    {name: "Sten", age: 32},
    {name: "Marta", age: 19},
    {name: "Sam", age: 27},
    {name: "Greg", age: 23},
    {name: "Lina", age: 46}
])
И в парамтры мы передаем масив. Этот массив будет состоять из документов (объектов). Объекты перечисляем через запятую

Отправляем. И получаем сообщение о том что 6 сущнастям были добавлены ID

- Получение данных по какому-то критерию
Для этого в функцию find({age: 23, name: "Alex"}) передаем объект в котором указываем критерий по которому мы хотим искать
Можно указывать несколько критериев

- Если нужно найти или это или то: ({$or: []})
db.users.find({$or: [{age: 27},{name: "Greg"}]})

- Хотим найти пользователя с возрастм не равным конкретно какому-то числу, а с возрастом больше или меньше
db.users.find({age: {$lt:30}}) . $lt - меньше чем 

- Если мы хотим искать меньше или равно, то добавляем букву e
db.users.find({age: {$lte:30}})

- Если хоти найти с большим возрастом
db.users.find({age: {$gt:30}}) . $gt - больше чем 

- Если мы хотим искать больше или равно, то добавляем букву e
db.users.find({age: {$gte:30}})

- Использовать оператор отрицания. Т.е не равен
db.users.find({age: {$ne:30}})

- Когда мы ищем какие-то документы в коллекции мы можем их отсортировать
Для этого после вызова функции find() вызываем также функцию sort() где внутри фигурных скобках указываем критерий
В sort() указываем критерий, и число либо 1 либо -1
1 ставим если хотим отсортировать в прямом порядке ( c 1 элемента по n.. c сортировкой от меньшего {age} к большему)
- 1 ставим если хотим отсортировать в обратном порядке ( c n.. элемента по 1 c сортировкой от большего {age} к меньшему)
db.users.find().sort({age: 1})

- Кол-во получаемых записей можно ограничить
db.users.find().limit(3) - параметром ограничиваем кол-во получаемых записей

MongoDB по умолчанию для каждого пользователя создает уникальный id

- Этот уникальный id является типом ObjectID. Чтобы искать пользователя по нему
db.users.findOne({_id: ObjectId("622ba364d65d7e58c2de0b43")})
db.users.findOne({age: 23}) - предпочтительней использовать для поиска одного человека

- Обновление записей
db.users.update()

Первым параметром принимает объект который необходимо найти и заменить
Можно указать несколько критериев все критерии которые подпадут под тот который мы передали первым параметром у всех будет заменено

Второмы параметром тоже передаем объект в котором указываем поле $set
db.users.updateMany{
    {name: 'Alex'}
    {
        $set: {
            name: 'Sergo',
            age: 13
        }
    }
}
Все критерии которые подпадут под тот который мы передали первым параметром у всех будет заменено
Вторым параметром передаем объект в котором указываем поле $set и записываем что: 
Всем найденым по этому критерию записям необходимо заменить на указанные в объекте $set

Лучше использовать updateOne и updateMany для обновления нескольких записей одновременно 

db.users.updateMany{
    {}
    {
        $rename: {
            name: 'fullname',
            
        }
    }
}
Первым параметром критерий, укажем его пустым чтобы обновить все записи
Теперь воспользуемся $rename - для того чтобы изменить название кокого-то поля
Теперь поле name заменено на поле fullname

- Чтобы удалить какого-то пользователя
db.users.deleteOne({age: 13})

В одном запросе мы можем делать сразу несколько операций: вставить пользователя, удалить, обновить
db.users.bulkWrite([
    {
        insertOne: {
            document: {fullname: 'Igor', age: 14}
        }
    },
    {
        deletOne: {
            filter: {fullname: 'Sergo'}
        }
    }
])

fullname - это name. До этого мы его переименовали / обновили


Где параметром передаем объекты. В массиве
- добавление пользователя пишем название операции которую хотим сделать и указываем поле document
И внутрь document передаем объект который будет добовлятся в базу данных

Вторым действием через запятую передаем второй объект который мы хотим удалить deleteOne
Внутри пишем filter. Фильтр по которому мы будем пользователей удалять

Типы связей:
1. Один-ко-многим
В данном случае мы для пользователя добавим посты
Почему один-ко-многим? Один пользователь может иметь несколько постов. 
В то время как эти несколько постов могут принадлежать только одному пользователю

db.users.update{
    {fullname: 'Alex'}
    {
        $set: {
            posts: [
                {title: 'JavaScript MongoDB', text: 'JS'}
                {title: 'JavaScript MongoDB', text: 'JS'}
                {title: 'JavaScript MongoDB', text: 'JS'}
            ]
        }
    }
}

Добавляем еще одно поле posts. Это будет массив состоящий из нескольких объектов
Каждый пост содержит заголовок и какой-то текст


*/